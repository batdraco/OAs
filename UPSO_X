%% Unified Particle Swarm Optimization (UPSOA)
% Jorge Mario Cruz Duarte, B.Eng, M.Sc, D.Eng
% Universidad Industrial de Santander - UIS
% Escuela de Ingenierias Electrica, Electronica y de Telecomunicaciones
% Bucaramanga - Santander - Colombia
% October - 2012 - Last revision: October - 2019
% Functions: None
% Subfunctions: None
% Required *.m-files: None
% Required *.mat-files: Parameters (Optional)

function [Xopt,FXopt,details] = UPSO_X(funct_name,lim,Parameters)

%% Global variables and others
% global Back ln bg ms lw met fun colors rep sol Pop0

%% LaTex enviroment
% Back      = 1;  %Back - Background color: White: 0 - Black: 1
% LaTex_Script

%% Warnings and errors
warning off

%% Variables tests


%% Constants tests


%% Engineering format
format longeng

% C    = 0; %Set color option (C=0 White - C=1 Black)

%% Function conversion
if ischar(funct_name) == 1
     functname      = str2func(funct_name);
else
     functname      = funct_name;
end

%% Algorithm parameters initialization
N_dim     = size(lim,1);

minval    = lim(:,1);    %Lower limit
maxval    = lim(:,2);    %Upper limit

if nargin < 3
     N_par       = 25;
     CpU         = 2;
     CgU         = 2.5;

     Chi         = 0.6;
     Uni         = 0.5;
     
     Max_gen     = 1000;      %Maximum number of generated particles
     Tol         = 5;         %Precision to stop criterion
     Msat        = 100;       %Number of iterations without a significant change of the optimal value
     Epsilon     = 1e-3;      %User precision
     
else
     N_par       = Parameters.N_par;
     CpU         = Parameters.CpU;
     CgU         = Parameters.CgU;
     Chi         = Parameters.Chi;
     Uni         = Parameters.Uni;
     Max_gen     = Parameters.Max_gen;
     Tol         = Parameters.Tol;
     Msat        = Parameters.Msat;
     Epsilon     = Parameters.Epsilon;
end

%% Initial time and toplot
toplot    = [];
tic

%% Preallocation
fpop      = zeros(N_dim,1);
v         = zeros(N_par,N_dim);

%% Topology definition
top  = diag(ones(N_par,1)) + diag(ones(N_par - 1,1),1)...
     + diag(ones(N_par - 1,1),-1) + diag(ones(1),N_par - 1)...
     + diag(ones(1),(1 - N_par));

%% Random population
xpop      = repmat(minval',N_par,1) + rand(N_par,N_dim).*repmat((maxval - minval)',N_par,1);
% xpop    = Pop0;

%% Population plot
% plot(xpop,'LineStyle','None','Marker','*','MarkerSize',2.5)
%
% xlabel('$Agents$')
% set(gca,'Xlim',[0,N_emp]);
% % set(gca,'XTick',())
% set(gca,'XMinorGrid','On');
% set(gca,'XMinorTick','On');
%
% ylabel('$Limits$')
% set(gca,'Ylim',[min(minval),max(maxval)]);
% % set(gca,'YTick',());
% set(gca,'YMinorGrid','On');
% set(gca,'YMinorTick','On');
%
% print(['Population_EFO_',num2str(N_emp),'agents_',num2str(N_dim),'dimensions'],'-depsc','-r750')
% print(['Population_EFO_',num2str(N_emp),'agents_',num2str(N_dim),'dimensions'],'-dpng','-r750')
% savefig(['Population_EFO_',num2str(N_emp),'agents_',num2str(N_dim),'dimensions','.fig'])

%% Function evaluation
for i = 1:N_par
     fpop(i,1)      = functname(xpop(i,:));
end

%% Temporal variables
fpopi          = fpop;
popi           = xpop;
generation     = N_par;

%% Population sorting
[~,gi]  = min(repmat(fpopi,1,N_par).*(top == 1) + ~(top == 1)*100);
Pgi     = popi(gi,:);

%% Finest population
[FXopt,g] = min(fpopi);
Xopt = xpop(g,:);

%% Set auxiliar variables
Xoptc    = 0;
FXoptc   = 0;

msatc1   = 0;
msatc2   = 0;
msatc3   = 0;
msatc4   = 0;
summ     = 0;       %Temporal mean
sums     = 0;       %Temporal standard deviation

iteration      = 1;

Xopt_p_i(1,:)       = Xopt;
FXopt_p_i(1,:)      = FXopt;

%% Main processing loop
while (generation <= Max_gen) %&& msatc1 < 0.5*Msat && msatc2 < Msat && msatc3 < 1.5*Msat && msatc4 < 2.0*Msat
     
     %% Increase the generation
     generation    = generation + 1;
     
     G    = Chi*(v + CpU*rand(N_par,N_dim).*(popi - xpop) + CgU*rand(N_par,N_dim).*(repmat(Xopt,N_par,1) - xpop));
     P    = Chi*(v + CpU*rand(N_par,N_dim).*(popi - xpop) + CgU*rand(N_par,N_dim).*(Pgi - xpop));
     
     v       = (1 - Uni)*P + G*Uni;
     
     xpop       = xpop + v;
     
     for i = 1 : N_par
          for d = 1 : N_dim
               if (xpop(i,d) < lim(d,1)) || (xpop(i,d) > lim(d,2))
                    xpop(i,d)      = minval(d)' + rand*(maxval(d) - minval(d))';
               end
          end
          fpop(i)   = functname(xpop(i,:));
     end
     
     cond      = fpop < fpopi;
     popi      = repmat(cond,1,N_dim).*xpop + repmat(~cond,1,N_dim).*popi;
     fpopi     = min(fpop,fpopi);
     
     [~,gi]  = min(repmat(fpopi,1,N_par).*(top == 1) + ~(top == 1)*100);
     Pgi     = popi(gi,:);
     
     temp = FXopt;
     
     [FXopt,g] = min(fpopi);
     
     if FXopt < temp
          Xopt = xpop(g,:);
     else
          FXopt = temp;
     end
     
     iteration = iteration + 1;
     
     Xopt_p_i(iteration,:)    = Xopt;
     FXopt_p_i(iteration,:)   = FXopt;
     
     %% Statistical information
     summ      = summ + FXopt;
     sums      = sums + FXopt^2;
     currm     = summ/generation;
     currs     = sqrt(sums/generation - currm^2);
     
     cur = abs(FXopt - currm);
     
     %% Stopping criteria
     
     % First
     if (abs(FXopt - currm) <= (Tol*currs)) %&& (FXopt == temp)
          msatc1 = msatc1 + 1;
     else
          msatc1 = 0;
     end
     
     % Second
     if (abs(FXopt - currm) <= Epsilon)
          msatc2 = msatc2 + 1;
     else
          msatc2 = 0;
     end
     
     % Third
     if (abs(FXopt - FXoptc) <= Epsilon^2)
          msatc3 = msatc3 + 1;
     else
          msatc3 = 0;
     end
     
     %% Fourth
     
     if (max(abs((Xopt - Xoptc)./Xopt)) <= Epsilon^3)
          msatc4 = msatc4 + 1;
     else
          msatc4 = 0;
     end
     
     Xoptc     = Xopt;
     FXoptc    = FXopt;
     
     %Stagnation
     if (generation <= Max_gen)
          outmsg = 1;
     else
          outmsg = 0;
     end
     
     %% Final time and toplot
     t    = toc;
     
     details = struct('time',t,'fevs',(N_par + 1)*generation,'steps',iteration,'outmsg',outmsg,'favg',currm,'fstd',currs,'Xopt_p_i',Xopt_p_i(:,1:N_dim),'FXopt_p_i',FXopt_p_i(:,1),'msat',[msatc1,msatc2,msatc3,msatc4]);
     
     toplot = [toplot; [generation,FXopt,Xopt,currm,currs]];
     
     %% Save session
     % save UPSOA.mat
     
end

end

%%
%Parameters

%Parameters = struct('N_par',25,'CpU',2.0,'CgU',2.5,'Chi',0.6,'Uni',0.5,'Max_gen',1000,'Tol',5,'Msat',100,'Epsilon',1e-3);

%%
%**************************************************************************************************
%Reference:  Parsopoulos, K. E. (2004).
%            UPSO: A unified particle swarm optimization scheme.
%            Lecture series on computer and computational science, 1, 868-873.
%
%**************************************************************************************************

%Any observations or/and suggestions for improvement of this code send to
%David Matajira at this email address: david.matajira@ugto.mx
%Your contribution to improving this code will be acknowledged in
%revision section in this script and in the MatLab web page of the
%File Exchange - MATLAB Central - MathWorks
