%% Electromagnetic Field Optimization Algorithm (EFOA)
% David Matajira Rueda, B.Eng, M.Eng, D.Eng(c)
% Universidad de Guanajuato - UG
% Division de Ingenierias Campus Irapuato-Salamanca - DICIS
% Salamanca - Guanajuato - Mexico
% October - 2016 - Last revision: October - 2019
% Functions: None
% Subfunctions: None
% Required *.m-files: None
% Required *.mat-files: Parameters (Optional)

function [Xopt,FXopt,details] = EFO_X(funct_name,lim,Parameters)

%% Global variables and others
% global Back ln bg ms lw met fun colors rep sol Pop0

%% LaTex enviroment
% Back      = 1;      % Back - Background color: White: 0 - Black: 1
% LaTex_Script

%% Warnings and errors
warning off

%% Variables tests


%% Constants tests
phi  = (1 + sqrt(5))/2;  %golden ratio

%% Engineering format
format longeng

% C = 0;  %Set color option (C=0 White - C=1 Black)

%% Function conversion
if ischar(funct_name) == 1
     functname      = str2func(funct_name);
else
     functname      = funct_name;
end

%% Algorithm parameters inicialization
N_dim     = size(lim,1);

minval    = lim(:,1);    %Lower limit
maxval    = lim(:,2);    %Upper limit

if nargin < 3
     if N_dim < 50
          N_emp     = 50;     %Number of electromagnetic particles
          R_rate    = 0.3;    %Probability of changing one electromagnet of generated particle with a random electromagnet
          P_rate    = 0.2;    %Probability of selecting electromagnets of generated particle from the positive field
          
          %Good solutions
          P_field   = 0.1;    %Portion of population from positive field
          %Bad solutions
          N_field   = 0.45;   %Portion of population from negative field
          
          Max_gen   = 1000;   %Maximum number of generated particles
          Tol       = 5;      %Precision to stop criterion
          Msat      = 100;    %Number of iterations without a significant change of the optimal value
          Epsilon   = 1e-3;   %User precision
     else
          N_emp     = N_dim;
          R_rate    = 0.3;
          P_rate    = 0.2;
          P_field   = 0.1;
          N_field   = 0.45;
          Max_gen   = 1000;
          Tol       = 5;
          Msat      = 100;
          Epsilon   = 1e-3;
     end
else
     N_emp     = Parameters.N_emp;
     R_rate    = Parameters.R_rate;
     P_rate    = Parameters.P_rate;
     P_field   = Parameters.P_field;
     N_field   = Parameters.N_field;
     Max_gen   = Parameters.Max_gen;
     Tol       = Parameters.Tol;
     Msat      = Parameters.Msat;
     Epsilon   = Parameters.Epsilon;
end

%% Initial time and toplot
toplot    = [];
tic

%% Random electromagnetic particles
xpop      = ((minval*ones(1,N_emp)) + (maxval - minval).*rand(N_dim,N_emp))';
% xpop    = Pop0;    %Performance tests condition

%% Population plot
% plot(xpop,'LineStyle','None','Marker','*','MarkerSize',2.5)
%
% xlabel('$Agents$')
% set(gca,'Xlim',[0,N_emp]);
% % set(gca,'XTick',())
% set(gca,'XMinorGrid','On');
% set(gca,'XMinorTick','On');
%
% ylabel('$Limits$')
% set(gca,'Ylim',[min(minval),max(maxval)]);
% % set(gca,'YTick',());
% set(gca,'YMinorGrid','On');
% set(gca,'YMinorTick','On');
%
% print(['Population_EFO_',num2str(N_emp),'agents_',num2str(N_dim),'dimensions'],'-depsc','-r750')
% print(['Population_EFO_',num2str(N_emp),'agents_',num2str(N_dim),'dimensions'],'-dpng','-r750')
% savefig(['Population_EFO_',num2str(N_emp),'agents_',num2str(N_dim),'dimensions','.fig'])

%% Function evaluation
for i = 1:N_emp
     fpop(i,1)      = feval(functname,xpop(i,:));
end

xpop      = [xpop(:,1:N_dim) fpop];
[~,I]     = sort(xpop(:,N_dim + 1));
xpop      = xpop(I,:);

%% Random vectors generation preallocate
r_index1 = randi([1 (round(N_emp.* P_field))],[N_dim Max_gen]);                                          %Random particles from positive field
r_index2 = randi([(round(N_emp.*(1 - N_field))) N_emp],[N_dim Max_gen]);                                 %Random particles from negative field
r_index3 = randi([(round(N_emp.* P_field) + 1) (round(N_emp.*(1 - N_field)) - 1)],[N_dim Max_gen]);      %Random particles from neutral field

ps              = rand(N_dim,Max_gen); %Probability of selecting electromagnets of generated particle from the positive field
r_force         = rand(1,Max_gen);     %Random electromagnetic force in each generation
rp              = rand(1,Max_gen);     %Random numbers for checking randomness in each generation
randomization   = rand(1,Max_gen);     %Coefficient of randomization when generated electromagnet is out of boundary
RI              = 1;                   %Index of the generated electromagnet initialized by random number
generation      = N_emp;

%% Set auxiliar variables
% FXoptc  = em_pop(1,N_dim + 1);
FXoptc    = 0;
Xoptc     = 0;
msatc1    = 0;
msatc2    = 0;
msatc3    = 0;
msatc4    = 0;
summ      = 0;      %Temporal mean
sums      = 0;      %Temporal standard deviation

iteration      = 1;

Xopt_p_i(1,:)  = xpop(1,1:N_dim);
FXopt_p_i(1,:) = xpop(1,N_dim + 1);

n_xpop = zeros(1,N_dim + 1);

%% Main processing loop
while (generation <= Max_gen) %&& msatc1 < 0.5*Msat && msatc2 < Msat && msatc3 < 1.5*Msat && msatc4 < 2.0*Msat
     
     r    = r_force(1,generation);
     
     for i = 1:N_dim
          if (ps(i,generation) > P_rate)
               
               n_xpop(i)      = xpop(r_index3(i,generation),i)...
                    + phi*r*(xpop(r_index1(i,generation),i) - xpop(r_index3(i,generation),i))...   %Positive attraction
                    + r*(xpop(r_index3(i,generation),i) - xpop(r_index2(i,generation),i));         %Negative attraction
          else
               n_xpop(i)      = xpop(r_index1(i,generation),i);
          end
          
          if (n_xpop(i) <= minval(i,1) || n_xpop(i) >= maxval(i,1))
               n_xpop(i)      = minval(i,1) + (maxval(i,1) - minval(i,1)).*randomization(1,generation);
          end
          
     end
     
     if (rp(1,generation) < R_rate)
          n_xpop(RI)     = minval(i,1) + (maxval(i,1) - minval(i,1)).*randomization(1,generation);
          RI = RI+1;
          if (RI > N_dim)
               RI   = 1;
          end
     end
     
     n_xpop(N_dim + 1)     = feval(functname,n_xpop(1:N_dim));
     
     if (n_xpop(N_dim + 1) < xpop(N_emp ,N_dim + 1))
          position  = find(xpop(:,N_dim + 1) > n_xpop(N_dim + 1));
          xpop = [xpop(1:position - 1,:);n_xpop;xpop(position(1):end - 1,:)];
     end
     
     %% Current optimal values
     Xopt      = xpop(1,1:N_dim);
     FXopt     = feval(functname,Xopt);
     
     iteration      = iteration + 1;
     
     Xopt_p_i(iteration,:)    = Xopt;
     FXopt_p_i(iteration,:)   = FXopt;
     
     %% Statistical information
     summ      = summ + FXopt;
     sums      = sums + FXopt^2;
     currm     = summ/generation;                  %Current mean
     currs     = sqrt(sums/generation - currm^2);  %Current standard deviation
     
     cur = abs(FXopt - currm);
     
     %% Stopping criteria
     
     %First
     if (abs(FXopt - currm) <= (Tol*currs)) %&& (FXopt == FXoptc)
          msatc1 = msatc1 + 1;
     else
          msatc1 = 0;
     end
     
     %Second
     if (abs(FXopt - currm) <= Epsilon)
          msatc2 = msatc2 + 1;
     else
          msatc2 = 0;
     end
     
     %Third
     if (abs(FXopt - FXoptc) <= Epsilon^2)
          msatc3 = msatc3 + 1;
     else
          msatc3 = 0;
     end
     
     %Fourth
     if (max(abs((Xopt - Xoptc)./Xopt)) <= Epsilon^3)
          msatc4 = msatc4 + 1;
     else
          msatc4 = 0;
     end
     
     Xoptc     = Xopt;
     FXoptc    = FXopt;
     
     %Stagnation
     if generation <= Max_gen
          outmsg = 1;
     else
          outmsg = 0;
     end
     
     %% Final time and toplot
     t = toc;
     
     details = struct('time',t,'fevs',(N_emp + 1)*generation,'steps',iteration,'outmsg',outmsg,'favg',currm,'fstd',currs,'Xopt_p_i',Xopt_p_i(:,1:N_dim),'FXopt_p_i',FXopt_p_i(:,1),'msat',[msatc1,msatc2,msatc3,msatc4]);
     
     toplot = [toplot; [iteration,FXopt,Xopt,currm,currs]];
     
     %% Increase the generation
     generation     = generation + 1;
     
     %% Save session
     % save EFOA.mat
     
end

end

% %%
% %Alternative functions
%
%     %insert_in_pop function
%     function newpop0 = insert_in_pop(cpopulation,nparticle,position)
%     newpop0 = [cpopulation(1:position-1,:);nparticle;cpopulation(position:end-1,:)];
%
%     end
%
%     %sortpop function
%     function sorted0 = sortpop (unsorted,column)
%     [T,I] = sort(unsorted(:,column));
%     sorted0 = unsorted(I,:);
%
%     end

%%
%Parameters

%Parameters = struct('N_emp',50,'R_rate',0.3,'P_rate',0.2,'P_field',0.1,'N_field',0.45,'Max_gen',1000,'Tol',5,'Msat',100,'Epsilon',1e-3);

%%
%**************************************************************************************************
%Reference:  Abedinpourshotorban, H., Shamsuddin, S. M., Beheshti, Z., & Jawawi, D. N. (2016).
%            Electromagnetic field optimization: a physics-inspired metaheuristic optimization algorithm.
%            Swarm and Evolutionary Computation, 26, 8-22.
%
%**************************************************************************************************

%Any observations or/and suggestions for improvement of this code send to
%David Matajira at this email address: david.matajira@ugto.mx
%Your contribution to improving this code will be acknowledged in
%revision section in this script and in the MatLab web page of the
%File Exchange - MATLAB Central - MathWorks
